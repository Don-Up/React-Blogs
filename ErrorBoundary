# ErrorBoundary

In React, an Error Boundary is a technique to capture JavaScript errors within the component tree, record these errors, and display fallback UIs. An Error Boundary is achieved through a class component that implements the lifecycle methods `componentDidCatch` and `static getDerivedStateFromError`.

## Summary of Error Boundary achievement

1. **Create a class component**: An Error Boundary must be a class component because functional components can’t use these lifecycle methods.
2. **Define an ErrorBoundaryState**: The `ErrorBoundaryState` has a `hasError` property to indicate if an error has been captured.
3. **Implement** `componentDidCatch`: This method is used to capture errors in child components and handle them, such as logging the errors.
4. **Implement** `getDerivedStateFromError`: This method is used to update the component state based on captured errors, enabling the component to display fallback UIs.
5. **Conditional renders in** `render`: Determine whether to render fallback UIs or the child components based on the error state.

## Detailed Process

First of all,  an ErrorBoundary is a class component：

```ts
class ErrorBoundary extends Componentt<?,?>{

}
```

The first generic type is `ErrorBoundaryProps`. Since `ErrorBoundary` should be used as a parent component, define it like this:

```ts   
interface ErrorBoundaryProps{
	children: ReactNode
}
```

The second generic type is `ErrorBoundaryState`. We require three properties: `hasError`, `error`, and `errorInfo`.

  ```ts
interface ErrorBoundaryState{
   hasError:boolean
   error?:Error
   errorInfo?:ErrorInfo
}
  ```

Next, we need to initialize the state within the constructor function.

```ts
constructor(props:ErrorBoundaryProps) {
    super(props);
    this.state = {hasError:false, error:null, errorInfo:null}
}
```

Before capturing and handling an error, you need to update the error state.

```ts
static getDerivedStateFromError(error:Error):ErrorBoundaryState{
	return {hasError:true, error, errorInfo:null}
}
```

Then capture the error and execute the side-effect within the `componentDidCatch` method.

```ts
componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error("Uncaught error:",error,errorInfo)
    this.setState({error, errorInfo})
}
```

Finally, in the `render` method, return the fallback UI or child components based on whether the `hasError` property of the state is true.

```tsx
render() {
    if(this.state.hasError){
        return (<div>
                    <h1>Something went wrong.</h1>
                    <details style={{whiteSpace:"pre-wrap"}}>
                        {this.state.error && this.state.error.toString()}
                    </details>
                </div>)
    }
    return this.props.children;
}
```



